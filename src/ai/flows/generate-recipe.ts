
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Generates a recipe based on a list of ingredients and dish type.
 *
 * - generateRecipe - A function that generates a recipe.
 * - GenerateRecipeInput - The input type for the generateRecipe function.
 * - GenerateRecipeOutput - The return type for the generateRecipe function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateRecipeInputSchema = z.object({
  ingredients: z
    .array(z.string())
    .describe('A list of ingredients to use in the recipe. Example: ["Chicken breast", "Broccoli", "Soy sauce"]'),
  dishType: z.string().describe('The type of dish to generate. Example: "Stir-fry" or "Quick weeknight dinner"'),
});
export type GenerateRecipeInput = z.infer<typeof GenerateRecipeInputSchema>;

const GenerateRecipeOutputSchema = z.object({
  recipeName: z.string().describe('The name of the generated recipe. Example: "Easy Chicken and Broccoli Stir-fry"'),
  ingredients: z.array(z.string()).describe('The ingredients for the recipe, with precise quantities and units. Example: ["1 lb chicken breast, cut into 1-inch pieces", "1 cup broccoli florets", "2 tbsp soy sauce"]'),
  instructions: z.array(z.string()).describe('Step-by-step instructions for the recipe. Example: ["1. Heat oil in a large skillet or wok over medium-high heat.", "2. Add chicken and cook until browned."]'),
  // Optional fields we encourage the model to populate:
  prepTime: z.string().optional().describe('Estimated preparation time. Example: "15 minutes"'),
  cookTime: z.string().optional().describe('Estimated cooking time. Example: "20 minutes"'),
  servings: z.string().optional().describe('Number of servings the recipe makes. Example: "4 servings"'),
  tips: z.array(z.string()).optional().describe('Optional tips or variations for the recipe. Example: ["For a spicier dish, add 1/2 tsp red pepper flakes with the garlic.", "Serve over rice or noodles."]')
});
export type GenerateRecipeOutput = z.infer<typeof GenerateRecipeOutputSchema>;

export async function generateRecipe(input: GenerateRecipeInput): Promise<GenerateRecipeOutput> {
  return generateRecipeFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateRecipePrompt',
  input: {schema: GenerateRecipeInputSchema},
  output: {schema: GenerateRecipeOutputSchema},
  prompt: `You are a creative and renowned world-class chef, tasked with crafting an exceptional recipe.
Based on the provided list of ingredients and the desired dish type, generate a complete, easy-to-follow recipe suitable for a home cook.

Input:
Ingredients available: {{#each ingredients}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
Desired Dish Type: {{{dishType}}}

Your generated recipe must include:
1.  \`recipeName\`: A creative and appealing name for the dish.
2.  \`ingredients\`: A detailed list of all necessary ingredients for the recipe.
    *   Include precise quantities using common culinary units (e.g., "1 cup (240ml) all-purpose flour", "2 tablespoons olive oil", "150g boneless, skinless chicken thighs", "1 teaspoon dried oregano").
    *   Incorporate the "Ingredients available" and supplement with other common ingredients to make a complete and delicious dish.
3.  \`instructions\`: Clear, step-by-step preparation and cooking instructions.
    *   Number each step.
    *   Be specific about cooking times, temperatures, and techniques.
    *   Include any important prep work (e.g., "Preheat oven to 200°C (400°F).", "Dice onions and mince garlic.").

Additionally, please try to include the following for an even better recipe (these fields are optional in the schema but highly encouraged):
*   \`prepTime\`: Estimated preparation time (e.g., "15 minutes").
*   \`cookTime\`: Estimated cooking time (e.g., "25 minutes").
*   \`servings\`: Number of servings the recipe yields (e.g., "4 servings").
*   \`tips\`: An array of strings with helpful tips, variations, or serving suggestions (e.g., ["For a gluten-free version, use tamari instead of soy sauce.", "Garnish with chopped cilantro before serving."]).

Ensure your output strictly adheres to the specified output schema.
`,
});

const generateRecipeFlow = ai.defineFlow(
  {
    name: 'generateRecipeFlow',
    inputSchema: GenerateRecipeInputSchema,
    outputSchema: GenerateRecipeOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);

