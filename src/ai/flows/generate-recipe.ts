
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Generates a recipe based on a list of ingredients and dish type, or tweaks an existing recipe,
 * considering user preferences for new recipes.
 *
 * - generateRecipe - A function that generates or tweaks a recipe.
 * - GenerateRecipeInput - The input type for the generateRecipe function.
 * - GenerateRecipeOutput - The return type for the generateRecipe function.
 * - NutritionalInfo - The type for nutritional information.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
// UserPreferences might be needed if we pass the whole object,
// but for now, we'll define specific fields in the input schema.

// NutritionalInfoSchema remains the same
const NutritionalInfoSchema = z.object({
  calories: z.string().describe('Estimated calories per serving. Example: "450 kcal"'),
  protein: z.string().describe('Estimated protein per serving. Example: "35g"'),
  carbohydrates: z.string().describe('Estimated carbohydrates per serving. Example: "40g"'),
  fat: z.string().describe('Estimated fat per serving. Example: "20g"'),
});
export type NutritionalInfo = z.infer<typeof NutritionalInfoSchema>;

// GenerateRecipeOutputSchema remains the same
const GenerateRecipeOutputSchema = z.object({
  recipeName: z.string().describe('The name of the generated recipe. Example: "Easy Chicken and Broccoli Stir-fry"'),
  ingredients: z.array(z.string()).describe('The ingredients for the recipe, with precise quantities and units. Example: ["1 lb chicken breast, cut into 1-inch pieces", "1 cup broccoli florets", "2 tbsp soy sauce"]'),
  instructions: z.array(z.string()).describe('Step-by-step instructions for the recipe. Example: ["1. Heat oil in a large skillet or wok over medium-high heat.", "2. Add chicken and cook until browned."]'),
  prepTime: z.string().optional().describe('Estimated preparation time. Example: "15 minutes"'),
  cookTime: z.string().optional().describe('Estimated cooking time. Example: "20 minutes"'),
  servings: z.string().optional().describe('Number of servings the recipe makes. Example: "4 servings"'),
  tips: z.array(z.string()).optional().describe('Optional tips or variations for the recipe. Example: ["For a spicier dish, add 1/2 tsp red pepper flakes with the garlic.", "Serve over rice or noodles."]'),
  nutritionalInfo: NutritionalInfoSchema.describe('Estimated nutritional information per serving for the generated recipe.'),
});
export type GenerateRecipeOutput = z.infer<typeof GenerateRecipeOutputSchema>;

// Updated GenerateRecipeInputSchema
const GenerateRecipeInputSchema = z.object({
  ingredients: z.array(z.string()).optional().describe('A list of ingredients to use if generating a new recipe from scratch. Example: ["Chicken breast", "Broccoli", "Soy sauce"]'),
  dishType: z.string().optional().describe('The type of dish to generate if generating a new recipe from scratch. Example: "Stir-fry" or "Quick weeknight dinner"'),
  
  // For recipe tweaking
  previousRecipeData: GenerateRecipeOutputSchema.optional().describe("The full data of the recipe to be tweaked, if this is a modification request."),
  tweakInstruction: z.string().optional().describe("Specific instruction on how to modify the previousRecipeData. E.g., 'Make it vegetarian', 'Double the servings', 'Use olive oil instead of butter'."),

  // For user preferences when generating a new recipe
  dietaryRestrictions: z.array(z.string()).optional().describe("A list of dietary restrictions to adhere to for a new recipe. Example: ['vegetarian', 'gluten-free']"),
  preferredCuisines: z.array(z.string()).optional().describe("A list of preferred cuisines for a new recipe. Example: ['Italian', 'Mexican']")
});
export type GenerateRecipeInput = z.infer<typeof GenerateRecipeInputSchema>;


export async function generateRecipe(input: GenerateRecipeInput): Promise<GenerateRecipeOutput> {
  if (input.tweakInstruction && !input.previousRecipeData) {
    throw new Error("previousRecipeData is required when tweakInstruction is provided.");
  }
  if (!input.tweakInstruction && (!input.ingredients || !input.dishType)) {
    // When not tweaking, ingredients and dishType are primary, preferences are secondary.
    if (!input.ingredients || input.ingredients.length === 0) throw new Error("Ingredients are required when generating a new recipe.");
    if (!input.dishType) throw new Error("Dish type is required when generating a new recipe.");
  }
  return generateRecipeFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateRecipePrompt',
  input: {schema: GenerateRecipeInputSchema},
  output: {schema: GenerateRecipeOutputSchema},
  prompt: `You are a creative and renowned world-class chef and nutritionist.

{{#if tweakInstruction}}
You are tasked with modifying an existing recipe based on a user's specific request.
Here is the original recipe data:
---
Original Recipe Name: {{{previousRecipeData.recipeName}}}
Original Ingredients:
{{#each previousRecipeData.ingredients}}
- {{{this}}}
{{/each}}
Original Instructions:
{{#each previousRecipeData.instructions}}
- {{{this}}}
{{/each}}
Original Prep Time: {{previousRecipeData.prepTime}}
Original Cook Time: {{previousRecipeData.cookTime}}
Original Servings: {{previousRecipeData.servings}}
Original Tips:
{{#each previousRecipeData.tips}}
- {{{this}}}
{{/each}}
Original Nutritional Info (per serving):
- Calories: {{previousRecipeData.nutritionalInfo.calories}}
- Protein: {{previousRecipeData.nutritionalInfo.protein}}
- Carbohydrates: {{previousRecipeData.nutritionalInfo.carbohydrates}}
- Fat: {{previousRecipeData.nutritionalInfo.fat}}
---

User's Tweak Request: "{{{tweakInstruction}}}"

Based on the user's tweak request, generate a NEW, MODIFIED version of the recipe.
The modified recipe must be complete and reflect the requested changes accurately. This includes:
1.  \`recipeName\`: An updated, creative, and appealing name for the modified dish. If the tweak is minor, you can adapt the original name (e.g., "Spicy {Original Recipe Name}", "{Original Recipe Name} with Tofu").
2.  \`ingredients\`: A REVISED list of all necessary ingredients for the modified recipe.
    *   Include precise quantities using common culinary units (Measurements to be Indian Specific) (e.g., "1 cup (240ml) all-purpose flour", "2 tablespoons olive oil", "150g firm tofu, cubed", "1 teaspoon red chili flakes").
    *   Adjust quantities, add, remove, or substitute ingredients from the original recipe as needed to fulfill the tweak request.
3.  \`instructions\`: REVISED, clear, step-by-step preparation and cooking instructions for the modified recipe.
    *   Be specific about cooking times, temperatures, and techniques.
    *   Update any prep work or cooking steps affected by the tweak.
4.  \`nutritionalInfo\`: RECALCULATED estimated nutritional information PER SERVING for the MODIFIED recipe. This is a MANDATORY field. Calculate this based on the ingredients and quantities in your NEWLY generated recipe. It must include:
    *   \`calories\`: Estimated calories per serving (e.g., "420 kcal").
    *   \`protein\`: Estimated protein per serving (e.g., "25g").
    *   \`carbohydrates\`: Estimated carbohydrates per serving (e.g., "50g").
    *   \`fat\`: Estimated fat per serving (e.g., "18g").

Also, please UPDATE the following fields if they are affected by the tweak (these fields are optional in the schema but highly encouraged for the best result):
*   \`prepTime\`: Estimated preparation time for the modified recipe.
*   \`cookTime\`: Estimated cooking time for the modified recipe.
*   \`servings\`: Number of servings the modified recipe yields. This is important for the per-serving nutritional calculation.
*   \`tips\`: An array of strings with helpful tips, variations, or serving suggestions relevant to the MODIFIED recipe.

Ensure the entire output strictly adheres to the output schema. Focus on creating a delicious and practical modified recipe.

{{else}}
You are tasked with crafting an exceptional and informative recipe from scratch.
Input:
Ingredients available: {{#each ingredients}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
Desired Dish Type: {{{dishType}}}

{{#if dietaryRestrictions.length}}
User's Dietary Restrictions (must be strictly followed):
{{#each dietaryRestrictions}}
- {{{this}}}
{{/each}}
{{/if}}

{{#if preferredCuisines.length}}
User's Preferred Cuisines (try to incorporate if possible):
{{#each preferredCuisines}}
- {{{this}}}
{{/each}}
{{/if}}

Based on the provided list of ingredients, desired dish type, and any specified user preferences, generate a complete, easy-to-follow recipe suitable for a home cook.

Your generated recipe must include:
1.  \`recipeName\`: A creative and appealing name for the dish.
2.  \`ingredients\`: A detailed list of all necessary ingredients for the recipe.
    *   Include precise quantities using common culinary units (Measurements to be Indian Specific) (e.g., "1 cup (240ml) all-purpose flour", "2 tablespoons olive oil", "150g boneless, skinless chicken thighs", "1 teaspoon dried oregano").
    *   Incorporate the "Ingredients available" and supplement with other common ingredients to make a complete and delicious dish.
    *   Ensure ingredients align with any specified dietary restrictions (e.g., if 'vegetarian' is a restriction, do not include meat).
3.  \`instructions\`: Clear, step-by-step preparation and cooking instructions.
    *   Be specific about cooking times, temperatures, and techniques.
    *   Include any important prep work (e.g., "Preheat oven to 200°C (400°F).", "Dice onions and mince garlic.").
4.  \`nutritionalInfo\`: Estimated nutritional information PER SERVING for the final recipe. This is a MANDATORY field. Calculate this based on the ingredients and quantities in your generated recipe. It must include:
    *   \`calories\`: Estimated calories per serving (e.g., "450 kcal").
    *   \`protein\`: Estimated protein per serving (e.g., "35g").
    *   \`carbohydrates\`: Estimated carbohydrates per serving (e.g., "40g").
    *   \`fat\`: Estimated fat per serving (e.g., "20g").

Additionally, please try to include the following for an even better recipe (these fields are optional in the schema but highly encouraged):
*   \`prepTime\`: Estimated preparation time (e.g., "15 minutes").
*   \`cookTime\`: Estimated cooking time (e.g., "25 minutes").
*   \`servings\`: Number of servings the recipe yields (e.g., "4 servings"). This is important for the per-serving nutritional calculation.
*   \`tips\`: An array of strings with helpful tips, variations, or serving suggestions (e.g., ["For a gluten-free version, use tamari instead of soy sauce.", "Garnish with chopped cilantro before serving."]).

If preferred cuisines are specified, try to align the recipe's style with them, but prioritize using the available ingredients and adhering to dietary restrictions.
Structure your response strictly according to the output schema.
{{/if}}
`,
  config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_ONLY_HIGH',
      },
    ],
  }
});

const generateRecipeFlow = ai.defineFlow(
  {
    name: 'generateRecipeFlow',
    inputSchema: GenerateRecipeInputSchema,
    outputSchema: GenerateRecipeOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
     if (!output) {
      throw new Error("AI failed to provide an output for recipe generation/tweaking.");
    }
    // Ensure nutritionalInfo is present, even if the model somehow misses it despite the prompt.
    if (!output.nutritionalInfo) {
        console.warn("AI output missing nutritionalInfo, attempting to add default. This indicates a prompt issue.");
        output.nutritionalInfo = { calories: "N/A", protein: "N/A", carbohydrates: "N/A", fat: "N/A" };
    }
    return output;
  }
);

